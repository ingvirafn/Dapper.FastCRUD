// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dapper.FastCrud.Benchmarks
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Queries")]
    public partial class QueriesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Benchmarks.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Queries", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert Benchmark")]
        [NUnit.Framework.CategoryAttribute("InMemoryBenchmark")]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Simple Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper Extensions", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Fast Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Entity Framework", null)]
        public virtual void InsertBenchmark(string databaseType, string entityType, string entityCount, string orm, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InMemoryBenchmark"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert Benchmark", @__tags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.When("I start the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.And(string.Format("I insert {0} {1} using {2}", entityCount, entityType, orm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And("I stop the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And(string.Format("I report the stopwatch value for {0} finished processing {1} operations of type i" +
                        "nsert", orm, entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.Then(string.Format("I should have {0} {1} in the database", entityCount, entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.And(string.Format("I cleanup the {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch Select No Filter")]
        [NUnit.Framework.CategoryAttribute("InMemoryBenchmark")]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Simple Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper Extensions", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Fast Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Entity Framework", null)]
        public virtual void BatchSelectNoFilter(string databaseType, string entityType, string entityCount, string orm, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InMemoryBenchmark"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch Select No Filter", @__tags);
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When(string.Format("I insert {0} {1} using ADO .NET", entityCount, entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.And("I refresh the database connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("I start the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And(string.Format("I select all the {0} using {1}", entityType, orm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("I clear all the queried entities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And(string.Format("I select all the {0} using {1}", entityType, orm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("I clear all the queried entities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And(string.Format("I select all the {0} using {1}", entityType, orm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And("I stop the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And(string.Format("I report the stopwatch value for {0} finished processing 3 operations of type sel" +
                        "ect all", orm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.Then(string.Format("I should have queried {0} entities", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
 testRunner.And(string.Format("I cleanup the {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single Delete Benchmark")]
        [NUnit.Framework.CategoryAttribute("InMemoryBenchmark")]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Simple Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper Extensions", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Fast Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Entity Framework", null)]
        public virtual void SingleDeleteBenchmark(string databaseType, string entityType, string entityCount, string orm, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InMemoryBenchmark"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single Delete Benchmark", @__tags);
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.When(string.Format("I insert {0} {1} using ADO .NET", entityCount, entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.And("I refresh the database connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("I start the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And(string.Format("I delete all the inserted {0} using {1}", entityType, orm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("I stop the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And(string.Format("I report the stopwatch value for {0} finished processing {1} operations of type d" +
                        "elete", orm, entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.Then(string.Format("I should have 0 {0} in the database", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
 testRunner.And(string.Format("I cleanup the {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single Select Id Filter Benchmark")]
        [NUnit.Framework.CategoryAttribute("InMemoryBenchmark")]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Simple Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper Extensions", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Fast Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Entity Framework", null)]
        public virtual void SingleSelectIdFilterBenchmark(string databaseType, string entityType, string entityCount, string orm, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InMemoryBenchmark"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single Select Id Filter Benchmark", @__tags);
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.When(string.Format("I insert {0} {1} using ADO .NET", entityCount, entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.And("I refresh the database connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("I start the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And(string.Format("I select all the {0} that I previously inserted using {1}", entityType, orm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("I stop the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And(string.Format("I report the stopwatch value for {0} finished processing {1} operations of type s" +
                        "elect by id", orm, entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.Then(string.Format("I should have queried {0} entities", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.And(string.Format("I cleanup the {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single Update Benchmark")]
        [NUnit.Framework.CategoryAttribute("InMemoryBenchmark")]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Simple Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper Extensions", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Fast Crud", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Dapper", null)]
        [NUnit.Framework.TestCaseAttribute("Benchmark LocalDb", "benchmark entities", "30000", "Entity Framework", null)]
        public virtual void SingleUpdateBenchmark(string databaseType, string entityType, string entityCount, string orm, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InMemoryBenchmark"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single Update Benchmark", @__tags);
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
 testRunner.When(string.Format("I insert {0} {1} using ADO .NET", entityCount, entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.And("I refresh the database connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("I start the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.And(string.Format("I update all the {0} that I previously inserted using {1}", entityType, orm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("I stop the stopwatch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.And(string.Format("I report the stopwatch value for {0} finished processing {1} operations of type u" +
                        "pdate", orm, entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.And(string.Format("I select all the {0} using Dapper", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 112
 testRunner.Then(string.Format("I cleanup the {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
